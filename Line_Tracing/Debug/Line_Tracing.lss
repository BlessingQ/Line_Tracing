
Line_Tracing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba2  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000945  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052a  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	47 c0       	rjmp	.+142    	; 0x12a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <stdio.h>
#include "ultra_sonic.h"
#include "motor_driver.h"

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62

class motor_driver
{
public:
	motor_driver(){
		motor_init();
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	1c d0       	rcall	.+56     	; 0xe6 <_ZN12motor_driver10motor_initEv>

	
    while (1) 
    {
		
		mymotor.motor_break();
  ae:	ce 01       	movw	r24, r28
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	37 d0       	rcall	.+110    	; 0x122 <_ZN12motor_driver11motor_breakEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	8f e4       	ldi	r24, 0x4F	; 79
  b8:	93 ec       	ldi	r25, 0xC3	; 195
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x1c>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x26>
  c4:	00 00       	nop
		_delay_ms(4000);
		mymotor.motor_forward();
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	1f d0       	rcall	.+62     	; 0x10a <_ZN12motor_driver13motor_forwardEv>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	87 ea       	ldi	r24, 0xA7	; 167
  d0:	91 e6       	ldi	r25, 0x61	; 97
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x34>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
		_delay_ms(2000);
		mymotor.motor_break();
  dc:	00 00       	nop
  de:	ce 01       	movw	r24, r28
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	1f d0       	rcall	.+62     	; 0x122 <_ZN12motor_driver11motor_breakEv>
  e4:	e4 cf       	rjmp	.-56     	; 0xae <main+0x10>

000000e6 <_ZN12motor_driver10motor_initEv>:

#include "motor_driver.h"


void motor_driver::motor_init(void){
	DRI_PORT_DDR |= (1<<IN1) | (1<<IN2)| (1<<IN3)| (1<<IN4);    //방향 포트 출력설정
  e6:	82 b1       	in	r24, 0x02	; 2
  e8:	8f 60       	ori	r24, 0x0F	; 15
  ea:	82 b9       	out	0x02, r24	; 2
	DRI_PORT &= ~(1<<IN1) | ~(1<<IN2)| ~(1<<IN3)| ~(1<<IN4);    //방향 포트 0으로 초기화
  ec:	83 b1       	in	r24, 0x03	; 3
  ee:	83 b9       	out	0x03, r24	; 3
	PWM_PORT = (1<<M_PWM1_PORT) | (1<<M_PWM2_PORT);
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	87 bb       	out	0x17, r24	; 23
	
	TCCR1A |= (1 << WGM11) | (1<<COM1A1)| (1<<COM1B1);       //FAST PWM
  f4:	8f b5       	in	r24, 0x2f	; 47
  f6:	82 6a       	ori	r24, 0xA2	; 162
  f8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS11) | (1<<CS10) | (1<< WGM12) | (1<<WGM13);    //Prescaler 64
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	8b 61       	ori	r24, 0x1B	; 27
  fe:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 249;
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	97 bd       	out	0x27, r25	; 39
 106:	86 bd       	out	0x26, r24	; 38
 108:	08 95       	ret

0000010a <_ZN12motor_driver13motor_forwardEv>:
}

void motor_driver::motor_forward(void){
	
	DRI_PORT |= (1<<IN1) | (1<<IN3);   //양바퀴 정회전
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	85 60       	ori	r24, 0x05	; 5
 10e:	83 b9       	out	0x03, r24	; 3
	DRI_PORT &=	~(1<<IN2) | ~(1<<IN4);
 110:	83 b1       	in	r24, 0x03	; 3
 112:	83 b9       	out	0x03, r24	; 3
		
		OCR1A = 248;  //50% 속도
 114:	88 ef       	ldi	r24, 0xF8	; 248
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9b bd       	out	0x2b, r25	; 43
 11a:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 248;   //75% 속도
 11c:	99 bd       	out	0x29, r25	; 41
 11e:	88 bd       	out	0x28, r24	; 40
 120:	08 95       	ret

00000122 <_ZN12motor_driver11motor_breakEv>:
}

void motor_driver::motor_break(void){
	DRI_PORT &= ~(1<<IN1) & ~(1<<IN2) & ~(1<<IN3) & ~(1<<IN4);
 122:	83 b1       	in	r24, 0x03	; 3
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	83 b9       	out	0x03, r24	; 3
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
